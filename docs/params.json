{"name":"Build.Tools","tagline":"Convention driven .net build scripts","body":"### Welcome to the Build.Tools.\r\nConvention driven .net builds scripts written in F#. Sub-module this repository at the root of your code repository and set 3 environment (or command line) variables and you're good to go.\r\n\r\nFor example, assuming you submodule this repository into a directory called tools:\r\n\r\n    tools\\Fake\\FAKE.exe tools\\Core.fsx \"target=Default\" \"tools=tools\" \"solution=src\\MySolution.sln\"\r\n\r\n#### What does it do?\r\n\r\n* Restores NuGet dependencies\r\n* Updates assembly and nuget package versions (including setting pre-release NuGet versions if you're not building from the master branch on the build server)\r\n* Builds your solution\r\n* Packs any nuspec files associated with project files in the repository\r\n* Runs NUnit tests in dlls named *.Tests.dll (if there are any)\r\n* Runs a set of SpecFlow features in a dll named *.Features.dll (if there is one)\r\n* Pushes nupkg files to a NuGet server (only if running on a build server)\r\n\r\n### Why does it exist?\r\n\r\nIf you're using NuGet and practice TDD, BDD or both your build workflow nearly always ends up looking very similar to the above. Rather than rewrite it again and again for every project, we decided to set up one project to rule them all, and in the darkness bind them.\r\n\r\nWait... did we say that out loud?\r\n\r\n### What's it based on?\r\n\r\nLike most open source projects, we're building on the shoulders of giants. In this case, the excellent [FAKE](https://github.com/fsharp/FAKE) (which we also contribute to).\r\n\r\n### Support or Contact\r\nDocumentation can be found in the [repository wiki](https://github.com/15below/Build.Tools/wiki).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}